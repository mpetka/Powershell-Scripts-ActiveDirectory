#
# CheckGPResultRemote.ps1
#
$ErrorActionPreference = "Continue"
Function WriteLog ([string]$message, [string]$logPath, [string]$logFileName)
{
	Try
	{
		#generate correct file name
		$filename = "$logFileName.log"

		Add-Content -Value $message -Path "$logPath\$filename"
	}
	catch
	{
		$ErrorActionPreference = "Stop"
		$errorLog = $_
		Write-Host "Error occured during logging. Script will not proceed without logging."
		Write-Host "`rError:"
		Write-Host $errorLog
	}
	finally
	{

	}
}

Try
{
    $Servers = Get-ADComputer -SearchBase "OU=OBM,OU=Application_Servers,OU=Servers,OU=Nieuwe Omgeving,DC=lwmeijer,DC=cag" -Filter * -SearchScope Subtree
	$serversToBeInvestigated = @()

	Write-Host "Number of server computer objects which will be checked: $($Servers.Count)" -ForegroundColor Yellow

    foreach ($server in $Servers)
    {
		Try
		{
			$serverName = $server.SamAccountName.Replace("$","")

			#check if it is a Server 2003 version. If true, then this server cannot be checked. Written in log file which contains computer names which are not checked
			$ServerInfo = Get-AdComputer $serverName -Properties operatingSystem

			if (($serverInfo.operatingSystem -eq "Windows Server 2003") -or ($ServerInfo.operatingSystem -eq "Windows Server 2000"))
			{
				Write-Host "Server $serverName is not checked because the Windows OS version is too low to be able to check remotely`n`n`n" -ForegroundColor Yellow
				WriteLog -message "$serverName is not checked. OS not supported" -logPath "C:\Temp" -logFileName "ServersNotChecked"
			}
			else
			{
				#get groupmemberships of server computer object
				$groupMemberships = Get-ADPrincipalGroupMembership -Identity $server.SamAccountName

				Write-Host "Group Membership of server $($server.SamAccountName)" -ForegroundColor Green
				foreach ($group in $groupMemberships)
				{
					Write-Host $group.Name -ForegroundColor Red
				}
				Write-Host "------------------------------------------------------------------------`n"

				#temporary path where xml is stored, generated by RSoP
				$tempXMLPath = "C:\Temp\GPResults\$serverName.xml"
        
				Write-Host "Get RSoP data from server $serverName" -ForegroundColor Green
				Get-GPResultantSetOfPolicy -Computer $serverName -ReportType Xml -Path $tempXMLPath -User "lwmeijer\Administrator" -ErrorAction Continue | Out-Null

				[xml]$xml = Get-Content -Path $tempXMLPath

				#get group membership of computer object
				$groups = $xml.Rsop.ComputerResults.SecurityGroup.Name

				Write-Host "Discovered groups in the GP Resultant Set of server $($server.Name)" -ForegroundColor Green
				Write-Host (($groups.'#text').Where{$_ -like "*SG_LWM*"}).Replace("LWMEIJER\","")
				Write-Host "------------------------------------------------------------------------`n"

				Write-Host "Start compare of the actual group membership vs group memberships configured in AD:" -ForegroundColor Green
				$compareOutput = Compare-Object -ReferenceObject (($groupMemberships.Name).Where{$_ -like "*SG_LWM*"} | Sort-Object) `
				-DifferenceObject ((($groups.'#text').Where{$_ -like "*SG_LWM*"}).Replace("LWMEIJER\","") | Sort-Object) -PassThru

				if ($compareOutput)
				{
					$serverObject = New-Object -TypeName PSObject
					$serverObject | Add-Member -MemberType NoteProperty -Name ServerName -Value $serverName
					$serverObject | Add-Member -MemberType NoteProperty -Name GroupsNotMatching -Value $compareOutput

					$serversToBeInvestigated += $serverObject
				}
				Write-Host "`n`n`n"

				#delete temp XML file
				Remove-Item -Path $tempXMLPath -Force

				#reinitialize variables
				$groups = $null
				$tempXMLPath = $null
				$xml = $null
				$compareOutput = $null
				$groupMemberships = $null
			}
		}
		Catch
		{
			$ErrorActionPreference = "Continue"
			Write-Host "Error occured, writing to log file..." -ForegroundColor Yellow
			$errorLog = $_
			WriteLog -message "While processing computer object $serverName, following error occured: `n$errorLog`n`n" -logPath "C:\Temp" -logFileName "GPResultPSScript"
			Remove-Item -Path $tempXMLPath -Force
		}
    }

	if ($serversToBeInvestigated)
	{
		$serversToBeInvestigated | Out-GridView
	}
	else
	{
		Write-Host "No servers were found which need further investigations regarding group memberships"
	}
}
catch 
{
    Write-Host "TERMINATING ERROR OCCURED" -ForegroundColor DarkRed -BackgroundColor Cyan
    $errorLog = $_
	Write-Host $errorLog
}
finally
{
    Write-Host "Script ended"
}